# Magic functions to export secrets from a project’s helmfile. The script needs helm, jq and yq.
#
# Drop this file into your zsh functions directory if you have one.
# Otherwise, do the following to create and use a functions directory called e.g. `.zfunctions` then drop the file there.
#
#   mkdir ~/.zfunctions
#
# To get the functions to load lazily on calling them, add the following to ~/.zshrc:
#
#   # Add a directory to hold functions and autoload all functions within the directory
#   # To refresh a function’s definition, use `unfunction function_name` before loading it again.
#   FPATH=~/.zfunctions:$FPATH
#   autoload -Uz ${fpath[1]}/*(:t)
#
# Then to use from your terminal, specify the environment (default = `preprod`), for example for smoke tests:
#
#   export_secrets testing
#

export_yaml_file() {
  filename=$1
  node=$2

  COLOUR_BLUE='\033[0;36m'
  COLOUR_END='\033[0m'

  if [ ! -f $filename ]; then
    return
  fi
  if [ "$(yq e $node $filename -o=json | jq -r '.')" = "null" ]; then
    return
  fi
  echo "\nBegin exporting node: '${COLOUR_BLUE}$node${COLOUR_END}' from file: '${COLOUR_BLUE}$filename${COLOUR_END}'"
  # yq e "$node" "$filename" -o=json | jq -rc '. | keys'
  exported=$(yq e "$node" "$filename" -o=json | jq -rc --color-output '. | keys')
  echo "Exported variables: $exported" | sed -e "s/,/, /g"

  for KEY in $(yq e $filename -o json | jq -r "$node | keys | .[]"); do
    VALUE=$(yq e $filename -o json | jq -r "$node.$KEY")
    if [ ! "$VALUE" = "" ]; then
      if [ "$(echo $VALUE | cut -c1)" = "'" ]; then
        eval "export $KEY=$VALUE"
      else
        eval "export $KEY=\"$VALUE\""
      fi
    fi
  done
}

export_secrets() {
  env=${1:-preprod}

  COLOUR_BLUE='\033[0;36m'
  COLOUR_END='\033[0m'

  echo "--- Exporting environment and secrets for env: '${COLOUR_BLUE}$env${COLOUR_END}'! ---"

  export_yaml_file "docker-compose.yml" ".services.app.environment"
  export_yaml_file "helmfile/environments/values.yaml" ".config"
  export_yaml_file "helmfile/environments/common.yaml" ".config"
  export_yaml_file "helmfile/environments/$env/values.yaml" ".config"

  SECRETS_FILE="helmfile/environments/$env/secrets.yaml"
  if [ -f "$SECRETS_FILE" ]; then
    helm secrets --quiet decrypt "$SECRETS_FILE" > "$SECRETS_FILE.dec"
    export_yaml_file "$SECRETS_FILE.dec" ".secrets"
    rm "helmfile/environments/$env/secrets.yaml.dec"
  fi
}

export_secrets $@
